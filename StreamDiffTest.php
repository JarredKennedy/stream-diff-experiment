<?php

class StreamDiffTest extends PHPUnit\Framework\TestCase {

	protected static Differ $differ;

	protected $streamA;

	protected $streamB;

	public function testDiff() {
		$diffs = self::$differ->diff($this->streamA, $this->streamB);

		$this->assertEquals(3, count($diffs), "Differ:diff returned an incorrect number of DiffOp objects");
		$this->assertContainsOnlyInstancesOf(DiffOp::class, $diffs);

		$expectedOpA = new DiffOp;
		$expectedOpA->originalLines = ["February\n", "March\n"];
		$expectedOpA->patchedLines = ["Marsh\n"];
		$expectedOpA->originalLineStart = 2;
		$expectedOpA->originalLinesEffected = 2;
		$expectedOpA->patchedLineStart = 2;
		$expectedOpA->patchedLinesEffected = 1;

		$this->assertEquals($expectedOpA, $diffs[0], "Expected DiffOp A was not generated by Differ::diff");

		$expectedOpB = new DiffOp;
		$expectedOpB->originalLines = ["July\n"];
		$expectedOpB->patchedLines = ["JULY\n"];
		$expectedOpB->originalLineStart = 7;
		$expectedOpB->originalLinesEffected = 1;
		$expectedOpB->patchedLineStart = 6;
		$expectedOpB->patchedLinesEffected = 1;

		$this->assertEquals($expectedOpB, $diffs[1], "Expected DiffOp B was not generated by Differ::diff");

		$expectedOpC = new DiffOp;
		$expectedOpC->originalLines = ["December\n"];
		$expectedOpC->patchedLines = ["October\n", "Monday\n", "Tuesday\n", "Wednesday\n"];
		$expectedOpC->originalLineStart = 10;
		$expectedOpC->originalLinesEffected = 1;
		$expectedOpC->patchedLineStart = 9;
		$expectedOpC->patchedLinesEffected = 4;

		$this->assertEquals($expectedOpC, $diffs[2], "Expected DiffOp C was not generated by Differ::diff");
	}

	public static function setUpBeforeClass() : void {
		self::$differ = new Differ;
	}

	protected function setUp() : void {
		$this->streamA = fopen('php://temp', 'r+b');
		$this->streamB = fopen('php://temp', 'r+b');

		$originalLines = [
			"January",
			"February",
			"March",
			"April",
			"May",
			"June",
			"July",
			"August",
			"September",
			"December"
		];
		$patchedLines = [
			"January",
			"Marsh",
			"April",
			"May",
			"June",
			"JULY",
			"August",
			"September",
			"October",
			"Monday",
			"Tuesday",
			"Wednesday"
		];

		foreach ($originalLines as $originalLine) {
			fwrite($this->streamA, $originalLine . "\n");
		}

		foreach ($patchedLines as $patchedLine) {
			fwrite($this->streamB, $patchedLine . "\n");
		}

		rewind($this->streamA);
		rewind($this->streamB);
	}

	protected function tearDown() : void {
		fclose($this->streamA);
		fclose($this->streamB);
	}

}